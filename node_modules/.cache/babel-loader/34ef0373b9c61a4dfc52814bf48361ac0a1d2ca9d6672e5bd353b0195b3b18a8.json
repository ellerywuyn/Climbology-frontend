{"ast":null,"code":"var _jsxFileName = \"/Users/yuningwu/Documents/Climbology-frontend/src/components/Create.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport axios from 'axios';\nimport kilter_board from '../assets/kilter_board.png'; // Ensure the path is correct\nimport './Create.css'; // Make sure the CSS file is named correctly and imported\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction KilterBoard() {\n  _s();\n  const [selectedHolds, setSelectedHolds] = useState([]);\n  const handleClick = async e => {\n    const NUM_GRID_COLUMNS = 35; // Number of columns in the grid\n    const NUM_GRID_ROWS = 38; // Number of rows in the grid\n    const GRID_X_INCREMENT = 1; // Number of pixels between each column\n    const GRID_Y_INCREMENT = 1; // Number of pixels between each row\n    const rect = e.target.getBoundingClientRect();\n    const originalHeight = e.target.naturalHeight;\n    const originalWidth = e.target.naturalWidth;\n\n    // Scaling factor\n    const scaleY = rect.height / originalHeight;\n    const scaleX = rect.width / originalWidth;\n    const clickX = (e.clientX - rect.left) / scaleX;\n    const clickY = (e.clientY - rect.top) / scaleY;\n    const clickX1 = e.clientX / scaleX;\n    const clickY1 = e.clientY / scaleY;\n\n    // const clickX = e.clientX - rect.left; // X coordinate relative to the image\n    // const clickY = e.clientY - rect.top; // Y coordinate relative to the image\n    console.log(\"clickX: \", clickX);\n    console.log(\"clickY: \", clickY);\n    console.log(\"e.clientX: \", e.clientX);\n    console.log(\"e.clientY: \", e.clientY);\n    const cellWidth = rect.width / NUM_GRID_COLUMNS; // Width of one cell\n    const cellHeight = rect.height / NUM_GRID_ROWS; // Height of one cell\n\n    const x = Math.floor(clickX / cellWidth) * GRID_X_INCREMENT;\n    const y = NUM_GRID_ROWS - Math.ceil(clickY / cellHeight) - 1;\n    try {\n      // Update this URL to the correct endpoint\n      const url = 'http://localhost:8000/create/identify_hold/';\n      const response = await axios.post(url, {\n        x,\n        y\n      });\n      if (response.data.success) {\n        const holdX = response.data.x_coordinate;\n        const holdY = response.data.y_coordinate;\n\n        // Convert grid coordinates back to pixel coordinates\n        const pixelX = holdX * cellWidth + cellWidth / 2;\n        const pixelY = (NUM_GRID_ROWS - holdY - 1) * cellHeight + cellHeight / 2;\n        setSelectedHolds([...selectedHolds, {\n          id: response.data.holdId,\n          x_grid: response.data.x_coordinate,\n          y_grid: response.data.y_coordinate,\n          // x_coor: e.clientX,\n          // y_coor: e.clientY,\n          // x_coor: clickX,\n          // y_coor: clickY\n          // x_coor: pixelX,\n          // y_coor: pixelY\n          x_coor: clickX1,\n          y_coor: clickY1\n        }]);\n        console.log('Hold identified:', response.data.holdId, response.data.x_coordinate, response.data.y_coordinate, pixelX, pixelY);\n      } else {\n        console.error('No hold identified:', response.data.message);\n      }\n    } catch (error) {\n      console.error('Error when identifying hold:', error);\n    }\n  };\n\n  // Function to render circles on selected holds\n  const renderCircles = () => {\n    return selectedHolds.map(hold => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"circle\",\n      style: {\n        top: hold.y_coor,\n        left: hold.x_coor\n      }\n      // style = {{top: clickX, left: e.clientX}}\n    }, hold.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"kilterBoardContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: kilter_board,\n      alt: \"Kilter Board\",\n      className: \"kilter-board\",\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), renderCircles()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n}\n_s(KilterBoard, \"oLk8k8ed9CZ13nwocXJIyGlAWWk=\");\n_c = KilterBoard;\nexport default KilterBoard;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// const Board = ({ numberOfRows, numberOfColumns }) => {\n//   const [selectedHold, setSelectedHold] = useState('');\n//   const boardRef = useRef();\n\n//   const handleBoardClick = async (event) => {\n//     const board = boardRef.current;\n//     const rect = board.getBoundingClientRect();\n//     const scaleX = board.width / rect.width;   // relationship bitmap vs. element for X\n//     const scaleY = board.height / rect.height; // relationship bitmap vs. element for Y\n\n//     const gridX = Math.ceil((event.clientX - rect.left) * scaleX / (board.width / numberOfColumns));\n//     const gridY = Math.ceil((event.clientY - rect.top) * scaleY / (board.height / numberOfRows));\n\n//     const holdLabel = `${String.fromCharCode(64 + gridY)}${gridX}`;\n//     setSelectedHold(holdLabel);\n//     try {\n//         // Update this URL to the correct endpoint\n//         const url = 'http://localhost:8000/create/identify_hold/';\n\n//         const response = await axios.post(url, { gridX, gridY });\n\n//         if (response.data.success) {\n//             setSelectedHold([...selectedHold, {\n//                 id: response.data.holdId,\n//                 x: response.data.x_coordinate,\n//                 y: response.data.y_coordinate\n//             }])\n//             console.log('Hold identified:', response.data.holdId);\n//         } else {\n//             console.error('No hold identified:', response.data.message);\n//         }\n//     } catch (error) {\n//         console.error('Error when identifying hold:', error);\n//     }\n// };\n\n//   return (\n//     <div>\n//       <img\n//         ref={boardRef}\n//         src={kilter_board}\n//         alt=\"Kilter Board\"\n//         onClick={handleBoardClick}\n//       />\n//       {selectedHold && <p>Selected Hold: {selectedHold}</p>}\n//     </div>\n//   );\n// };\n\n// export default Board;\n\n// function KilterBoard() {\n//     const [selectedHolds, setSelectedHolds] = useState([]);\n\n//     const handleClick = async (e) => {\n//         const NUM_GRID_COLUMNS = 35; // Number of columns in the grid\n//         const NUM_GRID_ROWS = 38; // Number of rows in the grid\n//         const GRID_X_INCREMENT = 1; // Number of pixels between each column\n//         const GRID_Y_INCREMENT = 1; // Number of pixels between each row\n//         const rect = e.target.getBoundingClientRect();\n//         const clickX = e.clientX - rect.left; // X coordinate relative to the image\n//         const clickY = e.clientY - rect.top; // Y coordinate relative to the image\n\n//         const cellWidth = rect.width / NUM_GRID_COLUMNS; // Width of one cell\n//         const cellHeight = rect.height / NUM_GRID_ROWS; // Height of one cell\n\n//         const gridX = Math.floor(clickX / cellWidth) * GRID_X_INCREMENT;\n//         // const gridY = Math.floor(clickY / cellHeight) * GRID_Y_INCREMENT;\n//         const gridY = (NUM_GRID_ROWS - 1 - Math.floor(clickY / cellHeight)) * GRID_Y_INCREMENT;\n\n//         try {\n//             // Update this URL to the correct endpoint\n//             const url = 'http://localhost:8000/create/identify_hold/';\n\n//             const response = await axios.post(url, { gridX, gridY });\n\n//             if (response.data.success) {\n//                 setSelectedHolds([...selectedHolds, {\n//                     id: response.data.holdId,\n//                     x: response.data.x_coordinate,\n//                     y: response.data.y_coordinate\n//                 }])\n//                 console.log('Hold identified:', response.data.holdId);\n//             } else {\n//                 console.error('No hold identified:', response.data.message);\n//             }\n//         } catch (error) {\n//             console.error('Error when identifying hold:', error);\n//         }\n//     };\n\n//     // const handleClick = async (e) => {\n//     //     const rect = e.target.getBoundingClientRect();\n//     //     const x = e.clientX - rect.left; // x coordinate relative to the image\n//     //     const y = e.clientY - rect.top; // y coordinate relative to the image\n\n//     //     try {\n//     //         // Update this URL to the correct endpoint\n//     //         const url = 'http://localhost:8000/create/identify_hold/';\n\n//     //         const response = await axios.post(url, { x, y });\n\n//     //         if (response.data.success) {\n//     //             setSelectedHolds([...selectedHolds, {\n//     //                 id: response.data.holdId,\n//     //                 x: response.data.x_coordinate,\n//     //                 y: response.data.y_coordinate\n//     //             }])\n//     //             console.log('Hold identified:', response.data.holdId);\n//     //         } else {\n//     //             console.error('No hold identified:', response.data.message);\n//     //         }\n//     //     } catch (error) {\n//     //         console.error('Error when identifying hold:', error);\n//     //     }\n//     // };\n\n//     // Function to render circles on selected holds\n//     const renderCircles = () => {\n//         return selectedHolds.map(hold => (\n//             <div \n//                 key={hold.id} \n//                 className=\"circle\" \n//                 style={{ top: hold.y, left: hold.x }} \n//             />\n//         ));\n//     };\n\n//     return (\n//         <div className=\"kilterBoardContainer\">\n//             <img src={kilter_board} alt=\"Kilter Board\" className=\"kilter-board\" onClick={handleClick} />\n//             {renderCircles()}\n//         </div>\n//     );\n// }\n\n// export default KilterBoard;\n\n// // import './Create.css'; // Make sure the CSS file is named correctly and imported\n// // import kilter_board from '../assets/kilter_board.png';\n// // import React, { useState } from 'react';\n// // import axios from 'axios';\n\n// // function Create() {\n// //     const [selectedHolds, setSelectedHolds] = useState([]);\n// //     // ... previous code ...\n\n// //     const renderCircles = () => {\n// //         return selectedHolds.map(hold => (\n// //         <div \n// //             key={hold.id} \n// //             className=\"circle\" \n// //             style={{ top: hold.y, left: hold.x }} \n// //         />\n// //         ));\n// //     };\n\n// //     const handleClick = async (e) => {\n// //         const rect = e.target.getBoundingClientRect();\n// //         const x = e.clientX - rect.left;\n// //         const y = e.clientY - rect.top;\n\n// //         const response = await axios.post('/api/identify-hold', { x, y });\n// //         if (response.data.success) {\n// //         setSelectedHolds([...selectedHolds, response.data.holdId]);\n// //         }\n// //     };\n\n// //     // return (\n// //     //     <img src={kilter_board} alt=\"kilter board\" className=\"kilter-board\" onClick={handleClick} />\n// //     // );\n\n// //     return (\n// //     <div className=\"kilterBoardContainer\">\n// //         <img src={kilter_board} alt=\"kilter board\" className=\"kilter-board\" onClick={handleClick} />\n// //         {renderCircles()}\n// //     </div>\n// //     );\n// // }\n\n// // export default Create;\n\n// //   return (\n// //     <main className=\"create-route\">\n// //       <h1>Climbology</h1>\n// //       <div className=\"content-area\">\n// //           <img src={kilter_board} alt=\"kilter board\" className=\"kilter-board\" />\n// //       </div>\n// //     </main>\n// //   );\n\n// const gridY = Math.floor(clickY / cellHeight) * GRID_Y_INCREMENT;\n// const y = (NUM_GRID_ROWS - 1 - Math.floor(clickY / cellHeight)) * GRID_Y_INCREMENT;\n// const rect = e.target.getBoundingClientRect();\n// const x = e.clientX - rect.left; // x coordinate relative to the image\n// const y = e.clientY - rect.top; // y coordinate relative to the image\nvar _c;\n$RefreshReg$(_c, \"KilterBoard\");","map":{"version":3,"names":["React","useState","useRef","axios","kilter_board","jsxDEV","_jsxDEV","KilterBoard","_s","selectedHolds","setSelectedHolds","handleClick","e","NUM_GRID_COLUMNS","NUM_GRID_ROWS","GRID_X_INCREMENT","GRID_Y_INCREMENT","rect","target","getBoundingClientRect","originalHeight","naturalHeight","originalWidth","naturalWidth","scaleY","height","scaleX","width","clickX","clientX","left","clickY","clientY","top","clickX1","clickY1","console","log","cellWidth","cellHeight","x","Math","floor","y","ceil","url","response","post","data","success","holdX","x_coordinate","holdY","y_coordinate","pixelX","pixelY","id","holdId","x_grid","y_grid","x_coor","y_coor","error","message","renderCircles","map","hold","className","style","fileName","_jsxFileName","lineNumber","columnNumber","children","src","alt","onClick","_c","$RefreshReg$"],"sources":["/Users/yuningwu/Documents/Climbology-frontend/src/components/Create.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport axios from 'axios';\nimport kilter_board from '../assets/kilter_board.png'; // Ensure the path is correct\nimport './Create.css'; // Make sure the CSS file is named correctly and imported\n\n\nfunction KilterBoard() {\n    const [selectedHolds, setSelectedHolds] = useState([]);\n    \n    const handleClick = async (e) => {\n        const NUM_GRID_COLUMNS = 35; // Number of columns in the grid\n        const NUM_GRID_ROWS = 38; // Number of rows in the grid\n        const GRID_X_INCREMENT = 1; // Number of pixels between each column\n        const GRID_Y_INCREMENT = 1; // Number of pixels between each row\n        const rect = e.target.getBoundingClientRect();\n\n        const originalHeight = e.target.naturalHeight;\n        const originalWidth = e.target.naturalWidth;\n    \n        // Scaling factor\n        const scaleY = rect.height / originalHeight;\n        const scaleX = rect.width / originalWidth;\n    \n        const clickX = (e.clientX - rect.left) / scaleX;\n        const clickY = (e.clientY - rect.top) / scaleY;\n\n        const clickX1 = e.clientX/ scaleX;\n        const clickY1 = e.clientY/ scaleY;\n    \n\n        // const clickX = e.clientX - rect.left; // X coordinate relative to the image\n        // const clickY = e.clientY - rect.top; // Y coordinate relative to the image\n        console.log(\"clickX: \", clickX);\n        console.log(\"clickY: \", clickY);\n        console.log(\"e.clientX: \", e.clientX);\n        console.log(\"e.clientY: \", e.clientY);\n        const cellWidth = rect.width / NUM_GRID_COLUMNS; // Width of one cell\n        const cellHeight = rect.height / NUM_GRID_ROWS; // Height of one cell\n    \n        const x = Math.floor(clickX / cellWidth) * GRID_X_INCREMENT;\n        const y = NUM_GRID_ROWS - Math.ceil(clickY / cellHeight) -1;\n\n\n\n        try {\n            // Update this URL to the correct endpoint\n            const url = 'http://localhost:8000/create/identify_hold/';\n            \n            const response = await axios.post(url, { x, y });\n            \n            if (response.data.success) {\n                const holdX = response.data.x_coordinate;\n                const holdY = response.data.y_coordinate;\n\n                // Convert grid coordinates back to pixel coordinates\n                const pixelX = holdX * cellWidth + cellWidth / 2;\n                const pixelY = (NUM_GRID_ROWS - holdY - 1) * cellHeight + cellHeight / 2;\n\n                setSelectedHolds([...selectedHolds, {\n                    id: response.data.holdId,\n                    x_grid: response.data.x_coordinate,\n                    y_grid: response.data.y_coordinate,\n                    // x_coor: e.clientX,\n                    // y_coor: e.clientY,\n                    // x_coor: clickX,\n                    // y_coor: clickY\n                    // x_coor: pixelX,\n                    // y_coor: pixelY\n                    x_coor: clickX1,\n                    y_coor: clickY1\n                }]);\n                console.log('Hold identified:', response.data.holdId, response.data.x_coordinate, response.data.y_coordinate, pixelX, pixelY);\n            } else {\n                console.error('No hold identified:', response.data.message);\n            }\n        } catch (error) {\n            console.error('Error when identifying hold:', error);\n        }\n    };\n\n    // Function to render circles on selected holds\n    const renderCircles = () => {\n        return selectedHolds.map(hold => (\n            <div \n                key={hold.id} \n                className=\"circle\" \n                style={{ top: hold.y_coor, left: hold.x_coor }} \n                // style = {{top: clickX, left: e.clientX}}\n            />\n        ));\n    };\n\n    return (\n        <div className=\"kilterBoardContainer\">\n            <img src={kilter_board} alt=\"Kilter Board\" className=\"kilter-board\" onClick={handleClick} />\n            {renderCircles()}\n        </div>\n    );\n}\n\nexport default KilterBoard;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// const Board = ({ numberOfRows, numberOfColumns }) => {\n//   const [selectedHold, setSelectedHold] = useState('');\n//   const boardRef = useRef();\n\n//   const handleBoardClick = async (event) => {\n//     const board = boardRef.current;\n//     const rect = board.getBoundingClientRect();\n//     const scaleX = board.width / rect.width;   // relationship bitmap vs. element for X\n//     const scaleY = board.height / rect.height; // relationship bitmap vs. element for Y\n\n//     const gridX = Math.ceil((event.clientX - rect.left) * scaleX / (board.width / numberOfColumns));\n//     const gridY = Math.ceil((event.clientY - rect.top) * scaleY / (board.height / numberOfRows));\n    \n//     const holdLabel = `${String.fromCharCode(64 + gridY)}${gridX}`;\n//     setSelectedHold(holdLabel);\n//     try {\n//         // Update this URL to the correct endpoint\n//         const url = 'http://localhost:8000/create/identify_hold/';\n        \n//         const response = await axios.post(url, { gridX, gridY });\n        \n//         if (response.data.success) {\n//             setSelectedHold([...selectedHold, {\n//                 id: response.data.holdId,\n//                 x: response.data.x_coordinate,\n//                 y: response.data.y_coordinate\n//             }])\n//             console.log('Hold identified:', response.data.holdId);\n//         } else {\n//             console.error('No hold identified:', response.data.message);\n//         }\n//     } catch (error) {\n//         console.error('Error when identifying hold:', error);\n//     }\n// };\n\n//   return (\n//     <div>\n//       <img\n//         ref={boardRef}\n//         src={kilter_board}\n//         alt=\"Kilter Board\"\n//         onClick={handleBoardClick}\n//       />\n//       {selectedHold && <p>Selected Hold: {selectedHold}</p>}\n//     </div>\n//   );\n// };\n\n// export default Board;\n\n\n\n\n\n\n// function KilterBoard() {\n//     const [selectedHolds, setSelectedHolds] = useState([]);\n\n    \n\n//     const handleClick = async (e) => {\n//         const NUM_GRID_COLUMNS = 35; // Number of columns in the grid\n//         const NUM_GRID_ROWS = 38; // Number of rows in the grid\n//         const GRID_X_INCREMENT = 1; // Number of pixels between each column\n//         const GRID_Y_INCREMENT = 1; // Number of pixels between each row\n//         const rect = e.target.getBoundingClientRect();\n//         const clickX = e.clientX - rect.left; // X coordinate relative to the image\n//         const clickY = e.clientY - rect.top; // Y coordinate relative to the image\n    \n//         const cellWidth = rect.width / NUM_GRID_COLUMNS; // Width of one cell\n//         const cellHeight = rect.height / NUM_GRID_ROWS; // Height of one cell\n    \n//         const gridX = Math.floor(clickX / cellWidth) * GRID_X_INCREMENT;\n//         // const gridY = Math.floor(clickY / cellHeight) * GRID_Y_INCREMENT;\n//         const gridY = (NUM_GRID_ROWS - 1 - Math.floor(clickY / cellHeight)) * GRID_Y_INCREMENT;\n\n    \n//         try {\n//             // Update this URL to the correct endpoint\n//             const url = 'http://localhost:8000/create/identify_hold/';\n            \n//             const response = await axios.post(url, { gridX, gridY });\n            \n//             if (response.data.success) {\n//                 setSelectedHolds([...selectedHolds, {\n//                     id: response.data.holdId,\n//                     x: response.data.x_coordinate,\n//                     y: response.data.y_coordinate\n//                 }])\n//                 console.log('Hold identified:', response.data.holdId);\n//             } else {\n//                 console.error('No hold identified:', response.data.message);\n//             }\n//         } catch (error) {\n//             console.error('Error when identifying hold:', error);\n//         }\n//     };\n\n    \n//     // const handleClick = async (e) => {\n//     //     const rect = e.target.getBoundingClientRect();\n//     //     const x = e.clientX - rect.left; // x coordinate relative to the image\n//     //     const y = e.clientY - rect.top; // y coordinate relative to the image\n\n//     //     try {\n//     //         // Update this URL to the correct endpoint\n//     //         const url = 'http://localhost:8000/create/identify_hold/';\n            \n//     //         const response = await axios.post(url, { x, y });\n            \n//     //         if (response.data.success) {\n//     //             setSelectedHolds([...selectedHolds, {\n//     //                 id: response.data.holdId,\n//     //                 x: response.data.x_coordinate,\n//     //                 y: response.data.y_coordinate\n//     //             }])\n//     //             console.log('Hold identified:', response.data.holdId);\n//     //         } else {\n//     //             console.error('No hold identified:', response.data.message);\n//     //         }\n//     //     } catch (error) {\n//     //         console.error('Error when identifying hold:', error);\n//     //     }\n//     // };\n\n//     // Function to render circles on selected holds\n//     const renderCircles = () => {\n//         return selectedHolds.map(hold => (\n//             <div \n//                 key={hold.id} \n//                 className=\"circle\" \n//                 style={{ top: hold.y, left: hold.x }} \n//             />\n//         ));\n//     };\n\n//     return (\n//         <div className=\"kilterBoardContainer\">\n//             <img src={kilter_board} alt=\"Kilter Board\" className=\"kilter-board\" onClick={handleClick} />\n//             {renderCircles()}\n//         </div>\n//     );\n// }\n\n// export default KilterBoard;\n\n\n\n// // import './Create.css'; // Make sure the CSS file is named correctly and imported\n// // import kilter_board from '../assets/kilter_board.png';\n// // import React, { useState } from 'react';\n// // import axios from 'axios';\n\n// // function Create() {\n// //     const [selectedHolds, setSelectedHolds] = useState([]);\n// //     // ... previous code ...\n\n// //     const renderCircles = () => {\n// //         return selectedHolds.map(hold => (\n// //         <div \n// //             key={hold.id} \n// //             className=\"circle\" \n// //             style={{ top: hold.y, left: hold.x }} \n// //         />\n// //         ));\n// //     };\n\n// //     const handleClick = async (e) => {\n// //         const rect = e.target.getBoundingClientRect();\n// //         const x = e.clientX - rect.left;\n// //         const y = e.clientY - rect.top;\n    \n// //         const response = await axios.post('/api/identify-hold', { x, y });\n// //         if (response.data.success) {\n// //         setSelectedHolds([...selectedHolds, response.data.holdId]);\n// //         }\n// //     };\n    \n// //     // return (\n// //     //     <img src={kilter_board} alt=\"kilter board\" className=\"kilter-board\" onClick={handleClick} />\n// //     // );\n      \n// //     return (\n// //     <div className=\"kilterBoardContainer\">\n// //         <img src={kilter_board} alt=\"kilter board\" className=\"kilter-board\" onClick={handleClick} />\n// //         {renderCircles()}\n// //     </div>\n// //     );\n// // }\n\n\n// // export default Create;\n\n\n// //   return (\n// //     <main className=\"create-route\">\n// //       <h1>Climbology</h1>\n// //       <div className=\"content-area\">\n// //           <img src={kilter_board} alt=\"kilter board\" className=\"kilter-board\" />\n// //       </div>\n// //     </main>\n// //   );\n\n        // const gridY = Math.floor(clickY / cellHeight) * GRID_Y_INCREMENT;\n        // const y = (NUM_GRID_ROWS - 1 - Math.floor(clickY / cellHeight)) * GRID_Y_INCREMENT;\n                // const rect = e.target.getBoundingClientRect();\n        // const x = e.clientX - rect.left; // x coordinate relative to the image\n        // const y = e.clientY - rect.top; // y coordinate relative to the image"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}