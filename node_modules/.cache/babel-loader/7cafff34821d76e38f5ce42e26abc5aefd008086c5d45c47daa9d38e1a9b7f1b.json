{"ast":null,"code":"var _jsxFileName = \"/Users/yuningwu/Documents/Climbology-frontend/src/components/Create.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport axios from 'axios';\nimport kilter_board from '../assets/kilter_board.png'; // Ensure the path is correct\nimport './Create.css'; // Make sure the CSS file is named correctly and imported\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Board = ({\n  numberOfRows,\n  numberOfColumns\n}) => {\n  _s();\n  const [selectedHold, setSelectedHold] = useState('');\n  const boardRef = useRef();\n  const handleBoardClick = async event => {\n    const board = boardRef.current;\n    const rect = board.getBoundingClientRect();\n    const scaleX = board.width / rect.width; // relationship bitmap vs. element for X\n    const scaleY = board.height / rect.height; // relationship bitmap vs. element for Y\n\n    const gridX = Math.ceil((event.clientX - rect.left) * scaleX / (board.width / numberOfColumns));\n    const gridY = Math.ceil((event.clientY - rect.top) * scaleY / (board.height / numberOfRows));\n    const holdLabel = `${String.fromCharCode(64 + gridY)}${gridX}`;\n    setSelectedHold(holdLabel);\n    try {\n      // Update this URL to the correct endpoint\n      const url = 'http://localhost:8000/create/identify_hold/';\n      const response = await axios.post(url, {\n        gridX,\n        gridY\n      });\n      if (response.data.success) {\n        setSelectedHold([...selectedHolds, {\n          id: response.data.holdId,\n          x: response.data.x_coordinate,\n          y: response.data.y_coordinate\n        }]);\n        console.log('Hold identified:', response.data.holdId);\n      } else {\n        console.error('No hold identified:', response.data.message);\n      }\n    } catch (error) {\n      console.error('Error when identifying hold:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      ref: boardRef,\n      src: \".png\",\n      alt: \"Kilter Board\",\n      onClick: handleBoardClick,\n      style: {\n        width: '100%',\n        height: 'auto'\n      } // Make sure the image scales proportionally\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), selectedHold && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Selected Hold: \", selectedHold]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(Board, \"z6BZ+E8iRBDVNLZYKBZ/tl8E46E=\");\n_c = Board;\nexport default Board;\n\n// function KilterBoard() {\n//     const [selectedHolds, setSelectedHolds] = useState([]);\n\n//     const handleClick = async (e) => {\n//         const NUM_GRID_COLUMNS = 35; // Number of columns in the grid\n//         const NUM_GRID_ROWS = 38; // Number of rows in the grid\n//         const GRID_X_INCREMENT = 1; // Number of pixels between each column\n//         const GRID_Y_INCREMENT = 1; // Number of pixels between each row\n//         const rect = e.target.getBoundingClientRect();\n//         const clickX = e.clientX - rect.left; // X coordinate relative to the image\n//         const clickY = e.clientY - rect.top; // Y coordinate relative to the image\n\n//         const cellWidth = rect.width / NUM_GRID_COLUMNS; // Width of one cell\n//         const cellHeight = rect.height / NUM_GRID_ROWS; // Height of one cell\n\n//         const gridX = Math.floor(clickX / cellWidth) * GRID_X_INCREMENT;\n//         // const gridY = Math.floor(clickY / cellHeight) * GRID_Y_INCREMENT;\n//         const gridY = (NUM_GRID_ROWS - 1 - Math.floor(clickY / cellHeight)) * GRID_Y_INCREMENT;\n\n//         try {\n//             // Update this URL to the correct endpoint\n//             const url = 'http://localhost:8000/create/identify_hold/';\n\n//             const response = await axios.post(url, { gridX, gridY });\n\n//             if (response.data.success) {\n//                 setSelectedHolds([...selectedHolds, {\n//                     id: response.data.holdId,\n//                     x: response.data.x_coordinate,\n//                     y: response.data.y_coordinate\n//                 }])\n//                 console.log('Hold identified:', response.data.holdId);\n//             } else {\n//                 console.error('No hold identified:', response.data.message);\n//             }\n//         } catch (error) {\n//             console.error('Error when identifying hold:', error);\n//         }\n//     };\n\n//     // const handleClick = async (e) => {\n//     //     const rect = e.target.getBoundingClientRect();\n//     //     const x = e.clientX - rect.left; // x coordinate relative to the image\n//     //     const y = e.clientY - rect.top; // y coordinate relative to the image\n\n//     //     try {\n//     //         // Update this URL to the correct endpoint\n//     //         const url = 'http://localhost:8000/create/identify_hold/';\n\n//     //         const response = await axios.post(url, { x, y });\n\n//     //         if (response.data.success) {\n//     //             setSelectedHolds([...selectedHolds, {\n//     //                 id: response.data.holdId,\n//     //                 x: response.data.x_coordinate,\n//     //                 y: response.data.y_coordinate\n//     //             }])\n//     //             console.log('Hold identified:', response.data.holdId);\n//     //         } else {\n//     //             console.error('No hold identified:', response.data.message);\n//     //         }\n//     //     } catch (error) {\n//     //         console.error('Error when identifying hold:', error);\n//     //     }\n//     // };\n\n//     // Function to render circles on selected holds\n//     const renderCircles = () => {\n//         return selectedHolds.map(hold => (\n//             <div \n//                 key={hold.id} \n//                 className=\"circle\" \n//                 style={{ top: hold.y, left: hold.x }} \n//             />\n//         ));\n//     };\n\n//     return (\n//         <div className=\"kilterBoardContainer\">\n//             <img src={kilter_board} alt=\"Kilter Board\" className=\"kilter-board\" onClick={handleClick} />\n//             {renderCircles()}\n//         </div>\n//     );\n// }\n\n// export default KilterBoard;\n\n// // import './Create.css'; // Make sure the CSS file is named correctly and imported\n// // import kilter_board from '../assets/kilter_board.png';\n// // import React, { useState } from 'react';\n// // import axios from 'axios';\n\n// // function Create() {\n// //     const [selectedHolds, setSelectedHolds] = useState([]);\n// //     // ... previous code ...\n\n// //     const renderCircles = () => {\n// //         return selectedHolds.map(hold => (\n// //         <div \n// //             key={hold.id} \n// //             className=\"circle\" \n// //             style={{ top: hold.y, left: hold.x }} \n// //         />\n// //         ));\n// //     };\n\n// //     const handleClick = async (e) => {\n// //         const rect = e.target.getBoundingClientRect();\n// //         const x = e.clientX - rect.left;\n// //         const y = e.clientY - rect.top;\n\n// //         const response = await axios.post('/api/identify-hold', { x, y });\n// //         if (response.data.success) {\n// //         setSelectedHolds([...selectedHolds, response.data.holdId]);\n// //         }\n// //     };\n\n// //     // return (\n// //     //     <img src={kilter_board} alt=\"kilter board\" className=\"kilter-board\" onClick={handleClick} />\n// //     // );\n\n// //     return (\n// //     <div className=\"kilterBoardContainer\">\n// //         <img src={kilter_board} alt=\"kilter board\" className=\"kilter-board\" onClick={handleClick} />\n// //         {renderCircles()}\n// //     </div>\n// //     );\n// // }\n\n// // export default Create;\n\n// //   return (\n// //     <main className=\"create-route\">\n// //       <h1>Climbology</h1>\n// //       <div className=\"content-area\">\n// //           <img src={kilter_board} alt=\"kilter board\" className=\"kilter-board\" />\n// //       </div>\n// //     </main>\n// //   );\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","useRef","axios","kilter_board","jsxDEV","_jsxDEV","Board","numberOfRows","numberOfColumns","_s","selectedHold","setSelectedHold","boardRef","handleBoardClick","event","board","current","rect","getBoundingClientRect","scaleX","width","scaleY","height","gridX","Math","ceil","clientX","left","gridY","clientY","top","holdLabel","String","fromCharCode","url","response","post","data","success","selectedHolds","id","holdId","x","x_coordinate","y","y_coordinate","console","log","error","message","children","ref","src","alt","onClick","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yuningwu/Documents/Climbology-frontend/src/components/Create.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport axios from 'axios';\nimport kilter_board from '../assets/kilter_board.png'; // Ensure the path is correct\nimport './Create.css'; // Make sure the CSS file is named correctly and imported\n\n\nconst Board = ({ numberOfRows, numberOfColumns }) => {\n  const [selectedHold, setSelectedHold] = useState('');\n  const boardRef = useRef();\n\n  const handleBoardClick = async (event) => {\n    const board = boardRef.current;\n    const rect = board.getBoundingClientRect();\n    const scaleX = board.width / rect.width;   // relationship bitmap vs. element for X\n    const scaleY = board.height / rect.height; // relationship bitmap vs. element for Y\n\n    const gridX = Math.ceil((event.clientX - rect.left) * scaleX / (board.width / numberOfColumns));\n    const gridY = Math.ceil((event.clientY - rect.top) * scaleY / (board.height / numberOfRows));\n    \n    const holdLabel = `${String.fromCharCode(64 + gridY)}${gridX}`;\n    setSelectedHold(holdLabel);\n    try {\n        // Update this URL to the correct endpoint\n        const url = 'http://localhost:8000/create/identify_hold/';\n        \n        const response = await axios.post(url, { gridX, gridY });\n        \n        if (response.data.success) {\n            setSelectedHold([...selectedHolds, {\n                id: response.data.holdId,\n                x: response.data.x_coordinate,\n                y: response.data.y_coordinate\n            }])\n            console.log('Hold identified:', response.data.holdId);\n        } else {\n            console.error('No hold identified:', response.data.message);\n        }\n    } catch (error) {\n        console.error('Error when identifying hold:', error);\n    }\n};\n\n  return (\n    <div>\n      <img\n        ref={boardRef}\n        src=\".png\"\n        alt=\"Kilter Board\"\n        onClick={handleBoardClick}\n        style={{ width: '100%', height: 'auto' }} // Make sure the image scales proportionally\n      />\n      {selectedHold && <p>Selected Hold: {selectedHold}</p>}\n    </div>\n  );\n};\n\nexport default Board;\n\n\n\n\n\n\n// function KilterBoard() {\n//     const [selectedHolds, setSelectedHolds] = useState([]);\n\n    \n\n//     const handleClick = async (e) => {\n//         const NUM_GRID_COLUMNS = 35; // Number of columns in the grid\n//         const NUM_GRID_ROWS = 38; // Number of rows in the grid\n//         const GRID_X_INCREMENT = 1; // Number of pixels between each column\n//         const GRID_Y_INCREMENT = 1; // Number of pixels between each row\n//         const rect = e.target.getBoundingClientRect();\n//         const clickX = e.clientX - rect.left; // X coordinate relative to the image\n//         const clickY = e.clientY - rect.top; // Y coordinate relative to the image\n    \n//         const cellWidth = rect.width / NUM_GRID_COLUMNS; // Width of one cell\n//         const cellHeight = rect.height / NUM_GRID_ROWS; // Height of one cell\n    \n//         const gridX = Math.floor(clickX / cellWidth) * GRID_X_INCREMENT;\n//         // const gridY = Math.floor(clickY / cellHeight) * GRID_Y_INCREMENT;\n//         const gridY = (NUM_GRID_ROWS - 1 - Math.floor(clickY / cellHeight)) * GRID_Y_INCREMENT;\n\n    \n//         try {\n//             // Update this URL to the correct endpoint\n//             const url = 'http://localhost:8000/create/identify_hold/';\n            \n//             const response = await axios.post(url, { gridX, gridY });\n            \n//             if (response.data.success) {\n//                 setSelectedHolds([...selectedHolds, {\n//                     id: response.data.holdId,\n//                     x: response.data.x_coordinate,\n//                     y: response.data.y_coordinate\n//                 }])\n//                 console.log('Hold identified:', response.data.holdId);\n//             } else {\n//                 console.error('No hold identified:', response.data.message);\n//             }\n//         } catch (error) {\n//             console.error('Error when identifying hold:', error);\n//         }\n//     };\n\n    \n//     // const handleClick = async (e) => {\n//     //     const rect = e.target.getBoundingClientRect();\n//     //     const x = e.clientX - rect.left; // x coordinate relative to the image\n//     //     const y = e.clientY - rect.top; // y coordinate relative to the image\n\n//     //     try {\n//     //         // Update this URL to the correct endpoint\n//     //         const url = 'http://localhost:8000/create/identify_hold/';\n            \n//     //         const response = await axios.post(url, { x, y });\n            \n//     //         if (response.data.success) {\n//     //             setSelectedHolds([...selectedHolds, {\n//     //                 id: response.data.holdId,\n//     //                 x: response.data.x_coordinate,\n//     //                 y: response.data.y_coordinate\n//     //             }])\n//     //             console.log('Hold identified:', response.data.holdId);\n//     //         } else {\n//     //             console.error('No hold identified:', response.data.message);\n//     //         }\n//     //     } catch (error) {\n//     //         console.error('Error when identifying hold:', error);\n//     //     }\n//     // };\n\n//     // Function to render circles on selected holds\n//     const renderCircles = () => {\n//         return selectedHolds.map(hold => (\n//             <div \n//                 key={hold.id} \n//                 className=\"circle\" \n//                 style={{ top: hold.y, left: hold.x }} \n//             />\n//         ));\n//     };\n\n//     return (\n//         <div className=\"kilterBoardContainer\">\n//             <img src={kilter_board} alt=\"Kilter Board\" className=\"kilter-board\" onClick={handleClick} />\n//             {renderCircles()}\n//         </div>\n//     );\n// }\n\n// export default KilterBoard;\n\n\n\n// // import './Create.css'; // Make sure the CSS file is named correctly and imported\n// // import kilter_board from '../assets/kilter_board.png';\n// // import React, { useState } from 'react';\n// // import axios from 'axios';\n\n// // function Create() {\n// //     const [selectedHolds, setSelectedHolds] = useState([]);\n// //     // ... previous code ...\n\n// //     const renderCircles = () => {\n// //         return selectedHolds.map(hold => (\n// //         <div \n// //             key={hold.id} \n// //             className=\"circle\" \n// //             style={{ top: hold.y, left: hold.x }} \n// //         />\n// //         ));\n// //     };\n\n// //     const handleClick = async (e) => {\n// //         const rect = e.target.getBoundingClientRect();\n// //         const x = e.clientX - rect.left;\n// //         const y = e.clientY - rect.top;\n    \n// //         const response = await axios.post('/api/identify-hold', { x, y });\n// //         if (response.data.success) {\n// //         setSelectedHolds([...selectedHolds, response.data.holdId]);\n// //         }\n// //     };\n    \n// //     // return (\n// //     //     <img src={kilter_board} alt=\"kilter board\" className=\"kilter-board\" onClick={handleClick} />\n// //     // );\n      \n// //     return (\n// //     <div className=\"kilterBoardContainer\">\n// //         <img src={kilter_board} alt=\"kilter board\" className=\"kilter-board\" onClick={handleClick} />\n// //         {renderCircles()}\n// //     </div>\n// //     );\n// // }\n\n\n// // export default Create;\n\n\n// //   return (\n// //     <main className=\"create-route\">\n// //       <h1>Climbology</h1>\n// //       <div className=\"content-area\">\n// //           <img src={kilter_board} alt=\"kilter board\" className=\"kilter-board\" />\n// //       </div>\n// //     </main>\n// //   );\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}