{"ast":null,"code":"var _jsxFileName = \"/Users/yuningwu/Documents/Climbology-frontend/src/components/Create.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport kilter_board from '../assets/kilter_board.png'; // Ensure the path is correct\nimport './Create.css'; // Make sure the CSS file is named correctly and imported\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction KilterBoard() {\n  _s();\n  const [selectedHolds, setSelectedHolds] = useState([]);\n  const handleClick = async e => {\n    const NUM_GRID_COLUMNS = 35; // Number of columns in the grid\n    const NUM_GRID_ROWS = 38; // Number of rows in the grid\n    const GRID_X_INCREMENT = 1; // Number of pixels between each column\n    const GRID_Y_INCREMENT = 1; // Number of pixels between each row\n    const rect = e.target.getBoundingClientRect();\n    const clickX = e.clientX - rect.left; // X coordinate relative to the image\n    const clickY = e.clientY - rect.top; // Y coordinate relative to the image\n\n    const cellWidth = rect.width / NUM_GRID_COLUMNS; // Width of one cell\n    const cellHeight = rect.height / NUM_GRID_ROWS; // Height of one cell\n\n    const gridX = Math.floor(clickX / cellWidth) * GRID_X_INCREMENT;\n    const gridY = Math.floor(clickY / cellHeight) * GRID_Y_INCREMENT;\n    try {\n      // Update this URL to the correct endpoint\n      const url = 'http://localhost:8000/create/identify_hold/';\n      const response = await axios.post(url, {\n        gridX,\n        gridY\n      });\n      if (response.data.success) {\n        setSelectedHolds([...selectedHolds, {\n          id: response.data.holdId,\n          x: response.data.x_coordinate,\n          y: response.data.y_coordinate\n        }]);\n        console.log('Hold identified:', response.data.holdId);\n      } else {\n        console.error('No hold identified:', response.data.message);\n      }\n    } catch (error) {\n      console.error('Error when identifying hold:', error);\n    }\n  };\n\n  // const handleClick = async (e) => {\n  //     const rect = e.target.getBoundingClientRect();\n  //     const x = e.clientX - rect.left; // x coordinate relative to the image\n  //     const y = e.clientY - rect.top; // y coordinate relative to the image\n\n  //     try {\n  //         // Update this URL to the correct endpoint\n  //         const url = 'http://localhost:8000/create/identify_hold/';\n\n  //         const response = await axios.post(url, { x, y });\n\n  //         if (response.data.success) {\n  //             setSelectedHolds([...selectedHolds, {\n  //                 id: response.data.holdId,\n  //                 x: response.data.x_coordinate,\n  //                 y: response.data.y_coordinate\n  //             }])\n  //             console.log('Hold identified:', response.data.holdId);\n  //         } else {\n  //             console.error('No hold identified:', response.data.message);\n  //         }\n  //     } catch (error) {\n  //         console.error('Error when identifying hold:', error);\n  //     }\n  // };\n\n  // Function to render circles on selected holds\n  const renderCircles = () => {\n    return selectedHolds.map(hold => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"circle\",\n      style: {\n        top: hold.y,\n        left: hold.x\n      }\n    }, hold.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"kilterBoardContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: kilter_board,\n      alt: \"Kilter Board\",\n      className: \"kilter-board\",\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), renderCircles()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n}\n_s(KilterBoard, \"oLk8k8ed9CZ13nwocXJIyGlAWWk=\");\n_c = KilterBoard;\nexport default KilterBoard;\n\n// import './Create.css'; // Make sure the CSS file is named correctly and imported\n// import kilter_board from '../assets/kilter_board.png';\n// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// function Create() {\n//     const [selectedHolds, setSelectedHolds] = useState([]);\n//     // ... previous code ...\n\n//     const renderCircles = () => {\n//         return selectedHolds.map(hold => (\n//         <div \n//             key={hold.id} \n//             className=\"circle\" \n//             style={{ top: hold.y, left: hold.x }} \n//         />\n//         ));\n//     };\n\n//     const handleClick = async (e) => {\n//         const rect = e.target.getBoundingClientRect();\n//         const x = e.clientX - rect.left;\n//         const y = e.clientY - rect.top;\n\n//         const response = await axios.post('/api/identify-hold', { x, y });\n//         if (response.data.success) {\n//         setSelectedHolds([...selectedHolds, response.data.holdId]);\n//         }\n//     };\n\n//     // return (\n//     //     <img src={kilter_board} alt=\"kilter board\" className=\"kilter-board\" onClick={handleClick} />\n//     // );\n\n//     return (\n//     <div className=\"kilterBoardContainer\">\n//         <img src={kilter_board} alt=\"kilter board\" className=\"kilter-board\" onClick={handleClick} />\n//         {renderCircles()}\n//     </div>\n//     );\n// }\n\n// export default Create;\n\n//   return (\n//     <main className=\"create-route\">\n//       <h1>Climbology</h1>\n//       <div className=\"content-area\">\n//           <img src={kilter_board} alt=\"kilter board\" className=\"kilter-board\" />\n//       </div>\n//     </main>\n//   );\nvar _c;\n$RefreshReg$(_c, \"KilterBoard\");","map":{"version":3,"names":["React","useState","axios","kilter_board","jsxDEV","_jsxDEV","KilterBoard","_s","selectedHolds","setSelectedHolds","handleClick","e","NUM_GRID_COLUMNS","NUM_GRID_ROWS","GRID_X_INCREMENT","GRID_Y_INCREMENT","rect","target","getBoundingClientRect","clickX","clientX","left","clickY","clientY","top","cellWidth","width","cellHeight","height","gridX","Math","floor","gridY","url","response","post","data","success","id","holdId","x","x_coordinate","y","y_coordinate","console","log","error","message","renderCircles","map","hold","className","style","fileName","_jsxFileName","lineNumber","columnNumber","children","src","alt","onClick","_c","$RefreshReg$"],"sources":["/Users/yuningwu/Documents/Climbology-frontend/src/components/Create.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport kilter_board from '../assets/kilter_board.png'; // Ensure the path is correct\nimport './Create.css'; // Make sure the CSS file is named correctly and imported\n\nfunction KilterBoard() {\n    const [selectedHolds, setSelectedHolds] = useState([]);\n\n\n\n    const handleClick = async (e) => {\n        const NUM_GRID_COLUMNS = 35; // Number of columns in the grid\n        const NUM_GRID_ROWS = 38; // Number of rows in the grid\n        const GRID_X_INCREMENT = 1; // Number of pixels between each column\n        const GRID_Y_INCREMENT = 1; // Number of pixels between each row\n        const rect = e.target.getBoundingClientRect();\n        const clickX = e.clientX - rect.left; // X coordinate relative to the image\n        const clickY = e.clientY - rect.top; // Y coordinate relative to the image\n    \n        const cellWidth = rect.width / NUM_GRID_COLUMNS; // Width of one cell\n        const cellHeight = rect.height / NUM_GRID_ROWS; // Height of one cell\n    \n        const gridX = Math.floor(clickX / cellWidth) * GRID_X_INCREMENT;\n        const gridY = Math.floor(clickY / cellHeight) * GRID_Y_INCREMENT;\n    \n        try {\n            // Update this URL to the correct endpoint\n            const url = 'http://localhost:8000/create/identify_hold/';\n            \n            const response = await axios.post(url, { gridX, gridY });\n            \n            if (response.data.success) {\n                setSelectedHolds([...selectedHolds, {\n                    id: response.data.holdId,\n                    x: response.data.x_coordinate,\n                    y: response.data.y_coordinate\n                }])\n                console.log('Hold identified:', response.data.holdId);\n            } else {\n                console.error('No hold identified:', response.data.message);\n            }\n        } catch (error) {\n            console.error('Error when identifying hold:', error);\n        }\n    };\n\n    \n    // const handleClick = async (e) => {\n    //     const rect = e.target.getBoundingClientRect();\n    //     const x = e.clientX - rect.left; // x coordinate relative to the image\n    //     const y = e.clientY - rect.top; // y coordinate relative to the image\n\n    //     try {\n    //         // Update this URL to the correct endpoint\n    //         const url = 'http://localhost:8000/create/identify_hold/';\n            \n    //         const response = await axios.post(url, { x, y });\n            \n    //         if (response.data.success) {\n    //             setSelectedHolds([...selectedHolds, {\n    //                 id: response.data.holdId,\n    //                 x: response.data.x_coordinate,\n    //                 y: response.data.y_coordinate\n    //             }])\n    //             console.log('Hold identified:', response.data.holdId);\n    //         } else {\n    //             console.error('No hold identified:', response.data.message);\n    //         }\n    //     } catch (error) {\n    //         console.error('Error when identifying hold:', error);\n    //     }\n    // };\n\n    // Function to render circles on selected holds\n    const renderCircles = () => {\n        return selectedHolds.map(hold => (\n            <div \n                key={hold.id} \n                className=\"circle\" \n                style={{ top: hold.y, left: hold.x }} \n            />\n        ));\n    };\n\n    return (\n        <div className=\"kilterBoardContainer\">\n            <img src={kilter_board} alt=\"Kilter Board\" className=\"kilter-board\" onClick={handleClick} />\n            {renderCircles()}\n        </div>\n    );\n}\n\nexport default KilterBoard;\n\n\n\n// import './Create.css'; // Make sure the CSS file is named correctly and imported\n// import kilter_board from '../assets/kilter_board.png';\n// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// function Create() {\n//     const [selectedHolds, setSelectedHolds] = useState([]);\n//     // ... previous code ...\n\n//     const renderCircles = () => {\n//         return selectedHolds.map(hold => (\n//         <div \n//             key={hold.id} \n//             className=\"circle\" \n//             style={{ top: hold.y, left: hold.x }} \n//         />\n//         ));\n//     };\n\n//     const handleClick = async (e) => {\n//         const rect = e.target.getBoundingClientRect();\n//         const x = e.clientX - rect.left;\n//         const y = e.clientY - rect.top;\n    \n//         const response = await axios.post('/api/identify-hold', { x, y });\n//         if (response.data.success) {\n//         setSelectedHolds([...selectedHolds, response.data.holdId]);\n//         }\n//     };\n    \n//     // return (\n//     //     <img src={kilter_board} alt=\"kilter board\" className=\"kilter-board\" onClick={handleClick} />\n//     // );\n      \n//     return (\n//     <div className=\"kilterBoardContainer\">\n//         <img src={kilter_board} alt=\"kilter board\" className=\"kilter-board\" onClick={handleClick} />\n//         {renderCircles()}\n//     </div>\n//     );\n// }\n\n\n// export default Create;\n\n\n//   return (\n//     <main className=\"create-route\">\n//       <h1>Climbology</h1>\n//       <div className=\"content-area\">\n//           <img src={kilter_board} alt=\"kilter board\" className=\"kilter-board\" />\n//       </div>\n//     </main>\n//   );\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}