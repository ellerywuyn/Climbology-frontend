{"ast":null,"code":"var _jsxFileName = \"/Users/yuningwu/Documents/Climbology-frontend/src/components/Create.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport kilter_board from '../assets/kilter_board.png'; // Ensure the path is correct\nimport './Create.css'; // Make sure the CSS file is named correctly and imported\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction KilterBoard() {\n  _s();\n  const [selectedHolds, setSelectedHolds] = useState([]);\n  const handleClick = async e => {\n    const rect = e.target.getBoundingClientRect();\n    const x = e.clientX - rect.left; // x coordinate relative to the image\n    const y = e.clientY - rect.top; // y coordinate relative to the image\n\n    try {\n      // Update this URL to the correct endpoint\n      const url = 'http://localhost:8000/create/identify-hold';\n      const response = await axios.post(url, {\n        x,\n        y\n      });\n      if (response.data.success) {\n        setSelectedHolds([...selectedHolds, {\n          id: response.data.holdId,\n          x: response.data.x_coordinate,\n          y: response.data.y_coordinate\n        }]);\n      } else {\n        console.error('No hold identified:', response.data.message);\n      }\n    } catch (error) {\n      console.error('Error when identifying hold:', error);\n    }\n  };\n\n  // Function to render circles on selected holds\n  const renderCircles = () => {\n    return selectedHolds.map(hold => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"circle\",\n      style: {\n        top: hold.y,\n        left: hold.x\n      }\n    }, hold.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"kilterBoardContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: kilter_board,\n      alt: \"Kilter Board\",\n      className: \"kilter-board\",\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), renderCircles()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}\n_s(KilterBoard, \"oLk8k8ed9CZ13nwocXJIyGlAWWk=\");\n_c = KilterBoard;\nexport default KilterBoard;\n\n// import './Create.css'; // Make sure the CSS file is named correctly and imported\n// import kilter_board from '../assets/kilter_board.png';\n// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// function Create() {\n//     const [selectedHolds, setSelectedHolds] = useState([]);\n//     // ... previous code ...\n\n//     const renderCircles = () => {\n//         return selectedHolds.map(hold => (\n//         <div \n//             key={hold.id} \n//             className=\"circle\" \n//             style={{ top: hold.y, left: hold.x }} \n//         />\n//         ));\n//     };\n\n//     const handleClick = async (e) => {\n//         const rect = e.target.getBoundingClientRect();\n//         const x = e.clientX - rect.left;\n//         const y = e.clientY - rect.top;\n\n//         const response = await axios.post('/api/identify-hold', { x, y });\n//         if (response.data.success) {\n//         setSelectedHolds([...selectedHolds, response.data.holdId]);\n//         }\n//     };\n\n//     // return (\n//     //     <img src={kilter_board} alt=\"kilter board\" className=\"kilter-board\" onClick={handleClick} />\n//     // );\n\n//     return (\n//     <div className=\"kilterBoardContainer\">\n//         <img src={kilter_board} alt=\"kilter board\" className=\"kilter-board\" onClick={handleClick} />\n//         {renderCircles()}\n//     </div>\n//     );\n// }\n\n// export default Create;\n\n//   return (\n//     <main className=\"create-route\">\n//       <h1>Climbology</h1>\n//       <div className=\"content-area\">\n//           <img src={kilter_board} alt=\"kilter board\" className=\"kilter-board\" />\n//       </div>\n//     </main>\n//   );\nvar _c;\n$RefreshReg$(_c, \"KilterBoard\");","map":{"version":3,"names":["React","useState","axios","kilter_board","jsxDEV","_jsxDEV","KilterBoard","_s","selectedHolds","setSelectedHolds","handleClick","e","rect","target","getBoundingClientRect","x","clientX","left","y","clientY","top","url","response","post","data","success","id","holdId","x_coordinate","y_coordinate","console","error","message","renderCircles","map","hold","className","style","fileName","_jsxFileName","lineNumber","columnNumber","children","src","alt","onClick","_c","$RefreshReg$"],"sources":["/Users/yuningwu/Documents/Climbology-frontend/src/components/Create.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport kilter_board from '../assets/kilter_board.png'; // Ensure the path is correct\nimport './Create.css'; // Make sure the CSS file is named correctly and imported\n\nfunction KilterBoard() {\n    const [selectedHolds, setSelectedHolds] = useState([]);\n\n    const handleClick = async (e) => {\n        const rect = e.target.getBoundingClientRect();\n        const x = e.clientX - rect.left; // x coordinate relative to the image\n        const y = e.clientY - rect.top; // y coordinate relative to the image\n\n        try {\n            // Update this URL to the correct endpoint\n            const url = 'http://localhost:8000/create/identify-hold';\n            \n            const response = await axios.post(url, { x, y });\n            \n            if (response.data.success) {\n                setSelectedHolds([...selectedHolds, {\n                    id: response.data.holdId,\n                    x: response.data.x_coordinate,\n                    y: response.data.y_coordinate\n                }]);\n            } else {\n                console.error('No hold identified:', response.data.message);\n            }\n        } catch (error) {\n            console.error('Error when identifying hold:', error);\n        }\n    };\n\n    // Function to render circles on selected holds\n    const renderCircles = () => {\n        return selectedHolds.map(hold => (\n            <div \n                key={hold.id} \n                className=\"circle\" \n                style={{ top: hold.y, left: hold.x }} \n            />\n        ));\n    };\n\n    return (\n        <div className=\"kilterBoardContainer\">\n            <img src={kilter_board} alt=\"Kilter Board\" className=\"kilter-board\" onClick={handleClick} />\n            {renderCircles()}\n        </div>\n    );\n}\n\nexport default KilterBoard;\n\n\n\n// import './Create.css'; // Make sure the CSS file is named correctly and imported\n// import kilter_board from '../assets/kilter_board.png';\n// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// function Create() {\n//     const [selectedHolds, setSelectedHolds] = useState([]);\n//     // ... previous code ...\n\n//     const renderCircles = () => {\n//         return selectedHolds.map(hold => (\n//         <div \n//             key={hold.id} \n//             className=\"circle\" \n//             style={{ top: hold.y, left: hold.x }} \n//         />\n//         ));\n//     };\n\n//     const handleClick = async (e) => {\n//         const rect = e.target.getBoundingClientRect();\n//         const x = e.clientX - rect.left;\n//         const y = e.clientY - rect.top;\n    \n//         const response = await axios.post('/api/identify-hold', { x, y });\n//         if (response.data.success) {\n//         setSelectedHolds([...selectedHolds, response.data.holdId]);\n//         }\n//     };\n    \n//     // return (\n//     //     <img src={kilter_board} alt=\"kilter board\" className=\"kilter-board\" onClick={handleClick} />\n//     // );\n      \n//     return (\n//     <div className=\"kilterBoardContainer\">\n//         <img src={kilter_board} alt=\"kilter board\" className=\"kilter-board\" onClick={handleClick} />\n//         {renderCircles()}\n//     </div>\n//     );\n// }\n\n\n// export default Create;\n\n\n//   return (\n//     <main className=\"create-route\">\n//       <h1>Climbology</h1>\n//       <div className=\"content-area\">\n//           <img src={kilter_board} alt=\"kilter board\" className=\"kilter-board\" />\n//       </div>\n//     </main>\n//   );\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}